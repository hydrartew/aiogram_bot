from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery

from aiogram.dispatcher.filters import Text

from filters import delete_ikb
from lib.config import admins
from lib import db_changes, db_selection
from loader import dp
from states import Accept, Cancel, Ticket
from keyboards.inline import (ikb_admin_main, ikb_admin_registration_user, ikb_support, ikb_back,
                              ikb_admin_show_tickets, ikb_admin_reply_to_ticket, ikb_admin_tickets_ids,
                              ikb_admin_show_messages, ikb_admin_reply, ikb_admin_sending_method,
                              ikb_admin_after_message_sent)


# –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
@dp.message_handler(text='/admin_panel', user_id=admins)
async def show_inline_menu(message: types.Message):
    await message.answer('‚ò†Ô∏è<b>–ê–¥–º–∏–Ω–∫–∞</b>‚ò†Ô∏è | –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ.', reply_markup=ikb_admin_main)


# –Ω–æ–≤—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–Ω–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏)
@dp.callback_query_handler(text='Registrations')
async def get_registration(call: CallbackQuery):
    reg = await db_selection.select_registration()

    if reg is not None:
        await call.message.edit_text(f'<b>user_id:</b> <code>{reg[1]}</code>\n'
                                     f'<b>tg_login:</b> @{reg[2]}\n'
                                     f'<b>fullname:</b> {reg[3]}\n'
                                     f'<b>date_reg:</b> {reg[5]}\n', reply_markup=ikb_admin_registration_user)
    elif reg is None:
        await call.message.edit_text('–ù–µ—Ç –Ω–æ–≤—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–πüôÖ‚Äç‚ôÇÔ∏è', reply_markup=ikb_back)


# –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ (—Å–æ—Å—Ç–æ—è–Ω–∏–µ: 1)
@dp.callback_query_handler(text='Accept')
async def accept_id(call: CallbackQuery):
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ id –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è')
    await Accept.user_id.set()


# –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ (–∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ)
@dp.message_handler(state=Accept.user_id, user_id=admins)
async def accept_reg(message: types.Message, state: FSMContext):
    await db_changes.accept_registration(message.text)
    await dp.bot.send_message(chat_id=message.text, text='–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞‚úÖü§ó')  # –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø-–ª—é
    await message.answer('–ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω)')
    await state.finish()


# –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ/–æ—Ç–º–µ–Ω–∞ –∑–∞—è–≤–∫–∏ (—Å–æ—Å—Ç–æ—è–Ω–∏–µ: 1)
@dp.callback_query_handler(text='Cancel')
async def cancelled_id(call: CallbackQuery):
    await call.message.edit_reply_markup(reply_markup=None)  # —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â—É—é –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ id –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è')
    await Cancel.user_id.set()


# –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ/–æ—Ç–º–µ–Ω–∞ –∑–∞—è–≤–∫–∏ (–∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ)
@dp.message_handler(state=Cancel.user_id, user_id=admins)
async def cancelled_reg(message: types.Message, state: FSMContext):
    await db_changes.cancelled_registration(message.text)
    await dp.bot.send_message(chat_id=message.text, text='–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞‚õîÔ∏èüò¢',
                              reply_markup=ikb_support)  # –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer('–†–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–æ. –û—Ç–∫–∞–∑–∞–Ω–æ. üòà')
    await state.finish()


# /admin_panel -> "–¢–∏–∫–µ—Ç—ã" >> –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∏–∫–µ—Ç–æ–≤
@dp.callback_query_handler(text='–¢–∏–∫–µ—Ç—ã')
async def get_tickets(call: CallbackQuery):
    count_tickets = len(await db_selection.new_tickets())

    if count_tickets == 0:
        reply_markup = ikb_back
    else:
        reply_markup = ikb_admin_show_tickets

    await call.message.edit_text(f'–ù–æ–≤—ã—Ö —Ç–∏–∫–µ—Ç–æ–≤: {count_tickets} —à—Ç.', reply_markup=reply_markup)


# /admin_panel -> "–¢–∏–∫–µ—Ç—ã" -> "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å" >> –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ —Ç–∏–∫–µ—Ç–æ–≤: id/ticket_status/login/ticket_created_at
@dp.callback_query_handler(text='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å')
async def get_tickets(call: CallbackQuery):
    tickets_info = await db_selection.new_tickets()
    message_answer = ''
    for i in tickets_info:
        login = await db_selection.select_login(i[1])
        message_answer += f'<u>ticketID: {i[0]}</u> ({i[2]})\n' \
                          f'<b>login:</b> @{login}\n' \
                          f'<b>created_at:</b> {i[3]}\n\n' \

    await call.message.edit_text(message_answer, reply_markup=ikb_admin_reply_to_ticket)


# /admin_panel -> "–¢–∏–∫–µ—Ç—ã" -> "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å" -> "–û—Ç–≤–µ—Ç–∏—Ç—å"  >> —Å–ø–∏—Å–æ–∫ –∏–∑ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫
@dp.callback_query_handler(text='–û—Ç–≤–µ—Ç–∏—Ç—å')
async def get_tickets(call: CallbackQuery):
    await call.message.edit_reply_markup(reply_markup=None)  # —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â—É—é –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É
    tickets_ids = await db_selection.tickets_ids()
    await call.message.answer('–í—ã–±–µ—Ä–∏ id —Ç–∏–∫–µ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –≤–æ–∑—å–º–µ—à—å ¬´–≤ —Ä–∞–±–æ—Ç—É¬ª',
                              reply_markup=ikb_admin_tickets_ids(tickets_ids))
    await Ticket.ticket.set()


# /admin_panel -> "–¢–∏–∫–µ—Ç—ã" -> "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å" -> "–û—Ç–≤–µ—Ç–∏—Ç—å" -> –ö–Ω–æ–ø–∫–∞: id —Ç–∏–∫–µ—Ç–∞ >> –≤—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∏–∫–µ—Ç–µ –∏ –ø-–ª–µ
@dp.callback_query_handler(Text(startswith='ticket_'), state=Ticket.ticket)
async def get_tickets(call: CallbackQuery, state: FSMContext):
    ticket_id = call.data[7:]  # –ø–æ–ª—É—á–∏—Ç—å —Ç–∏–∫–µ—Ç id (—á–∏—Å–ª–æ –ø–æ—Å–ª–µ "ticket_")
    user_id = await db_selection.select_user_id_by_ticket_id(ticket_id)

    async with state.proxy() as data:
        data['ticket_id'] = ticket_id
        data['user_id'] = user_id

    user_info = await db_selection.select_user_by_user_id(user_id)
    count_messages = len(await db_selection.select_messages_in_ticket(ticket_id))
    await call.message.edit_text(f'<u>ticketID: {ticket_id}</u>\n'
                                 f'<b>user_id:</b> {user_info[1]}\n'
                                 f'<b>login:</b> @{user_info[2]}\n'
                                 f'<b>name:</b> {user_info[3]}\n'
                                 f'<b>profile_status:</b> {user_info[4]}\n'
                                 f'<b>profile_created:</b> {user_info[5]}\n\n'
                                 f'–ù–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {count_messages} —à—Ç.\n\n'
                                 f'–í—ã–≤–æ–¥: ‚¨áÔ∏è',
                                 reply_markup=ikb_admin_show_messages)


# /admin_panel -> "–¢–∏–∫–µ—Ç—ã" -> "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å" -> "–û—Ç–≤–µ—Ç–∏—Ç—å" -> –ö–Ω–æ–ø–∫–∞: id —Ç–∏–∫–µ—Ç–∞ -> "–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è" >>
# >> –≤—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —Ç–∏–∫–µ—Ç–∞ —Ç–µ–∫—Å—Ç–æ–º (1 —Å–æ–æ–±—â–µ–Ω–∏–µ–º)
@dp.callback_query_handler(text='–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è', state=Ticket.ticket)
async def get_tickets(call: CallbackQuery, state: FSMContext):
    await call.message.edit_reply_markup(reply_markup=None)  # —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â—É—é –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É

    data = await state.get_data()
    ticket_id = data.get('ticket_id')

    messages = await db_selection.select_messages_in_ticket(ticket_id)
    message_answer = ''

    if len(messages) == 0:
        message_answer = '–ù–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π'
    else:
        for row in messages:
            message_answer += f'<b>id:</b> <code>{row[0]}</code> <i>({row[5]})</i>\n' \
                              f'{row[4]}\n\n'
            # –≤—ã–≤–æ–¥ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π (–µ—Å–ª–∏ —Å–∏–º–≤–æ–ª–æ–≤ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ > 4096)
            if len(message_answer) > 4096:
                await call.message.answer(message_answer[:4096])
                message_answer = message_answer[4096:]

    await call.message.answer(message_answer, reply_markup=ikb_admin_reply)


# /admin_panel -> "–¢–∏–∫–µ—Ç—ã" -> "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å" -> "–û—Ç–≤–µ—Ç–∏—Ç—å" -> –ö–Ω–æ–ø–∫–∞: id —Ç–∏–∫–µ—Ç–∞ -> "–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è" ->
# -> "–°–ø—Ä–∞–≤–∫–∞"
@dp.callback_query_handler(text='–°–ø—Ä–∞–≤–∫–∞', state=Ticket.ticket)
async def get_tickets(call: CallbackQuery):
    await call.message.edit_reply_markup(reply_markup=None)  # —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â—É—é –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É
    await call.message.answer(f'–ß—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤–≤–µ–¥–∏ !<u>id —Å–æ–æ–±—â–µ–Ω–∏—è</u> –∏ '
                              f'—Å–≤–æ–π —Ç–µ–∫—Å—Ç —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏\n\n'
                              f'<i>–ü—Ä–∏–º–µ—Ä:</i>\n'
                              f'!105\n'
                              f'–ö–∞–∫–æ–π-—Ç–æ —Ç–µ–∫—Å—Ç\n\n'
                              f'–ß—Ç–æ–±—ã –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å, –≤–≤–µ–¥–∏ —Å–≤–æ–π —Ç–µ–∫—Å—Ç –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏',
                              reply_markup=ikb_back)


# –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
@dp.message_handler(state=Ticket.ticket, user_id=admins)
async def get_tickets(message: types.Message, state: FSMContext):
    await delete_ikb(message.from_user.id, message.message_id)  # —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â—É—é –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É
    await delete_ikb(message.from_user.id, message.message_id-1)  # —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â—É—é –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É

    message_text = message.text

    if message_text.startswith('!'):
        message_id = int(message_text.split()[0][1:])  # –∏–∑–≤–ª–µ—á—å id (—á–∏—Å–ª–æ –ø–æ—Å–ª–µ –∑–Ω–∞–∫–∞ "!")

        # —É–±—Ä–∞—Ç—å –∏–∑ 1–æ–π —Å—Ç—Ä–æ–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è "!id"
        message_text = message_text.split('\n')[1:]
        message_text = '\n'.join(message_text)
        async with state.proxy() as data:
            data['message_id'] = message_id
            data['message_text'] = message_text

    else:
        async with state.proxy() as data:
            data['message_text'] = message_text

    await message.reply('–ó–∞–ø–∏—Å–∞–ª...', reply_markup=ikb_admin_sending_method)


# –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–º–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
@dp.callback_query_handler(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å', state=Ticket.ticket)
async def get_tickets(call: CallbackQuery, state: FSMContext):
    await call.message.edit_reply_markup(reply_markup=None)  # —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â—É—é –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É

    data = await state.get_data()

    message_text = f'<b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞üëÆ‚Äç‚ôÇÔ∏è:</b> \n\n'
    message_text += data.get('message_text')
    user_id = data.get('user_id')
    ticket_id = data.get('ticket_id')

    await db_changes.change_ticket_status(ticket_id=ticket_id, ticket_status='at_work')

    # –µ—Å–ª–∏ –∞–¥–º–∏–Ω –≤–≤—ë–ª !id
    if 'message_id' in data:
        message_id_primary_key = data.get('message_id')
        message_id = await db_selection.select_message_id_by_id(message_id_primary_key)
        await dp.bot.send_message(chat_id=user_id, text=message_text, reply_to_message_id=message_id)

    else:
        await dp.bot.send_message(chat_id=user_id, text=message_text)

    await call.message.edit_text(f'<b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ</b>\n'
                                 f'{data}\n\n'
                                 f'–ß—Ç–æ–±—ã <u>–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë</u>, –≤–≤–µ–¥–∏ —Å–≤–æ–π —Ç–µ–∫—Å—Ç –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏',
                                 reply_markup=ikb_admin_after_message_sent)


# /admin_panel -> "–¢–∏–∫–µ—Ç—ã" -> "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å" -> "–û—Ç–≤–µ—Ç–∏—Ç—å" -> –ö–Ω–æ–ø–∫–∞: id —Ç–∏–∫–µ—Ç–∞ -> "–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è" ->
# -> –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è -> "–û—Ç–ø—Ä–∞–≤–∏—Ç—å" -> "–ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç"
@dp.callback_query_handler(text='–ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç', state=Ticket.ticket, user_id=admins)
async def send_message(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    ticket_id = data.get('ticket_id')

    await db_changes.change_ticket_status(ticket_id=ticket_id, ticket_status='closed')

    await call.message.edit_text(f'<b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ</b>\n'
                                 f'{data}\n\n'
                                 f'<u>–¢–∏–∫–µ—Ç –∑–∞–∫—Ä—ã—Ç</u>',
                                 reply_markup=ikb_back)

    await state.finish()


# –Ω–∞–∑–∞–¥ + –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–∫–Ω–æ–ø–∫–∞ "–Ω–∞–∑–∞–¥" >> /admin_panel)
@dp.callback_query_handler(text='Back', state=Ticket.ticket, user_id=admins)
async def send_message(call: CallbackQuery, state: FSMContext):
    await call.message.edit_reply_markup(reply_markup=None)  # —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â—É—é –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É
    await call.message.answer('‚ò†Ô∏è<b>–ê–¥–º–∏–Ω–∫–∞</b>‚ò†Ô∏è | –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ.', reply_markup=ikb_admin_main)
    await state.finish()


# –∫–Ω–æ–ø–∫–∞ "–Ω–∞–∑–∞–¥" >> /admin_panel
@dp.callback_query_handler(text='Back', user_id=admins)
async def send_message(call: CallbackQuery):
    await call.message.edit_reply_markup(reply_markup=None)  # —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â—É—é –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É
    await call.message.answer('‚ò†Ô∏è<b>–ê–¥–º–∏–Ω–∫–∞</b>‚ò†Ô∏è | –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ.', reply_markup=ikb_admin_main)


# –∫–Ω–æ–ø–∫–∞ "–û—Ç–º–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏" + –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ >> /admin_panel
@dp.callback_query_handler(text='–û—Ç–º–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏', state=Ticket.ticket, user_id=admins)
async def send_message(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text('–û—Ç–º–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏')
    await call.message.answer('‚ò†Ô∏è<b>–ê–¥–º–∏–Ω–∫–∞</b>‚ò†Ô∏è | –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ.', reply_markup=ikb_admin_main)
    await state.finish()
